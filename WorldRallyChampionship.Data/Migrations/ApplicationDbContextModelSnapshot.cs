// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorldRallyChampionship.Data;

#nullable disable

namespace WorldRallyChampionship.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f2c4d3a1-bb93-4b29-bd38-9e98d60f6f01",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentityUser");

                    b.HasData(
                        new
                        {
                            Id = "7699db7d-964f-4782-8209-d76562e0fece",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "42ae65bd-7807-4b4a-a7c1-451e2a2c69f9",
                            Email = "admin@horizons.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HORIZONS.COM",
                            NormalizedUserName = "ADMIN@HORIZONS.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFnW1f+n0sBgn6rw/tabeRDnbNtgtNMB5oiV48owqe8UKIUFgwIqC4g2gUz69dW8aw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f89b3256-fb32-4a98-aa09-3a1c316993ab",
                            TwoFactorEnabled = false,
                            UserName = "admin@horizons.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "7699db7d-964f-4782-8209-d76562e0fece",
                            RoleId = "f2c4d3a1-bb93-4b29-bd38-9e98d60f6f01"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WorldRallyChampionship.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WorldRallyChampionship.Data.Models.CoDriver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("CoDriver");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(1985, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jonne",
                            ImageUrl = "/img/co-drivers/jonne-halttunen.jpg",
                            LastName = "Halttunen",
                            Nationality = "Finland",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(1981, 11, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Scott",
                            ImageUrl = "/img/co-drivers/scott-martin.jpg",
                            LastName = "Martin",
                            Nationality = "United Kingdom",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(1992, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Martijn",
                            ImageUrl = "/img/co-drivers/martijn-wydaeghe.jpg",
                            LastName = "Wydaeghe",
                            Nationality = "Belgium",
                            TeamId = 2
                        },
                        new
                        {
                            Id = 4,
                            DateOfBirth = new DateTime(1987, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Martin",
                            ImageUrl = "/img/co-drivers/martin-jarveoja.jpg",
                            LastName = "Järveoja",
                            Nationality = "Estonia",
                            TeamId = 2
                        },
                        new
                        {
                            Id = 5,
                            DateOfBirth = new DateTime(1993, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Alexandre",
                            ImageUrl = "/img/co-drivers/alexandre-coria.jpg",
                            LastName = "Coria",
                            Nationality = "France",
                            TeamId = 3
                        },
                        new
                        {
                            Id = 6,
                            DateOfBirth = new DateTime(1998, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Louis",
                            ImageUrl = "/img/co-drivers/louis-louka.jpg",
                            LastName = "Louka",
                            Nationality = "Belgium",
                            TeamId = 3
                        });
                });

            modelBuilder.Entity("WorldRallyChampionship.Data.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<int?>("RallyEventId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("RallyEventId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("WorldRallyChampionship.Data.Models.Crew", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CarImageUrl")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("CarModel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CarNumber")
                        .HasColumnType("int");

                    b.Property<int>("CoDriverId")
                        .HasColumnType("int");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoDriverId");

                    b.HasIndex("DriverId");

                    b.HasIndex("TeamId");

                    b.ToTable("Crews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarModel = "Toyota GR Yaris Rally1",
                            CarNumber = 69,
                            CoDriverId = 1,
                            DriverId = 1,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 2,
                            CarModel = "Toyota GR Yaris Rally1",
                            CarNumber = 33,
                            CoDriverId = 2,
                            DriverId = 2,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 3,
                            CarModel = "Hyundai i20 N Rally1",
                            CarNumber = 11,
                            CoDriverId = 3,
                            DriverId = 3,
                            TeamId = 2
                        },
                        new
                        {
                            Id = 4,
                            CarModel = "Hyundai i20 N Rally1",
                            CarNumber = 8,
                            CoDriverId = 4,
                            DriverId = 4,
                            TeamId = 2
                        },
                        new
                        {
                            Id = 5,
                            CarModel = "Ford Puma Rally1",
                            CarNumber = 16,
                            CoDriverId = 5,
                            DriverId = 5,
                            TeamId = 3
                        },
                        new
                        {
                            Id = 6,
                            CarModel = "Ford Puma Rally1",
                            CarNumber = 27,
                            CoDriverId = 6,
                            DriverId = 6,
                            TeamId = 3
                        });
                });

            modelBuilder.Entity("WorldRallyChampionship.Data.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(2000, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Kalle",
                            ImageUrl = "/img/drivers/kalle-rovampera.jpg",
                            LastName = "Rovanperä",
                            Nationality = "Finland",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(1988, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Elfyn",
                            ImageUrl = "/img/drivers/elfyn-evans.jpg",
                            LastName = "Evans",
                            Nationality = "Wales",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(1988, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Thierry",
                            ImageUrl = "/img/drivers/thierry-neuville.jpg",
                            LastName = "Neuville",
                            Nationality = "Belgium",
                            TeamId = 2
                        },
                        new
                        {
                            Id = 4,
                            DateOfBirth = new DateTime(1987, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ott",
                            ImageUrl = "/img/drivers/ott-tanak.jpg",
                            LastName = "Tänak",
                            Nationality = "Estonia",
                            TeamId = 2
                        },
                        new
                        {
                            Id = 5,
                            DateOfBirth = new DateTime(1995, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Adrien",
                            ImageUrl = "/img/drivers/adrien-fourmaux.jpg",
                            LastName = "Fourmaux",
                            Nationality = "France",
                            TeamId = 3
                        },
                        new
                        {
                            Id = 6,
                            DateOfBirth = new DateTime(1998, 3, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Grégoire",
                            ImageUrl = "/img/drivers/gregoire-munster.jpg",
                            LastName = "Munster",
                            Nationality = "Luxembourg",
                            TeamId = 3
                        });
                });

            modelBuilder.Entity("WorldRallyChampionship.Data.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublishedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SourceUrl")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "WRC Editorial",
                            Content = "Full article content here...",
                            ImageUrl = "/img/news/monte.jpg",
                            IsFeatured = true,
                            PublishedOn = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SourceUrl = "https://example.com/monte",
                            Summary = "Iconic season opener returns with night stages and tight mountain passes.",
                            Title = "Rallye Monte-Carlo: Opening Round Confirmed"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Press",
                            Content = "Full article content here...",
                            ImageUrl = "/img/news/fight.jpg",
                            IsFeatured = true,
                            PublishedOn = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "Point gap narrows after dramatic Power Stage.",
                            Title = "Evans vs Neuville: Early Title Fight"
                        });
                });

            modelBuilder.Entity("WorldRallyChampionship.Data.Models.RallyEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Surface")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RallyEvents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Monaco / France",
                            Description = "Legendary winter tarmac rally.",
                            EndDate = new DateTime(2025, 1, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/img/rallies/rallye-monte-carlo-2025.jpg",
                            Name = "Rallye Monte-Carlo",
                            StartDate = new DateTime(2025, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surface = "Tarmac"
                        },
                        new
                        {
                            Id = 2,
                            Country = "Sweden",
                            Description = "Fast snow stages with snowbanks.",
                            EndDate = new DateTime(2025, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/img/rallies/wrc-rally-sweden-2025.jpg",
                            Name = "Rally Sweden",
                            StartDate = new DateTime(2025, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surface = "Snow"
                        },
                        new
                        {
                            Id = 3,
                            Country = "Croatia",
                            Description = "Technical tarmac with tricky cuts.",
                            EndDate = new DateTime(2025, 4, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/img/rallies/croatia-rally-2025.jpg",
                            Name = "Croatia Rally",
                            StartDate = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surface = "Tarmac"
                        });
                });

            modelBuilder.Entity("WorldRallyChampionship.Data.Models.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("RallyEventId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("RallyEventId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("WorldRallyChampionship.Data.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LogoUrl = "/img/teams/toyota.jpg",
                            Manufacturer = "Toyota",
                            Name = "Toyota Gazoo Racing"
                        },
                        new
                        {
                            Id = 2,
                            LogoUrl = "/img/teams/hyundai.jpg",
                            Manufacturer = "Hyundai",
                            Name = "Hyundai Shell Mobis"
                        },
                        new
                        {
                            Id = 3,
                            LogoUrl = "/img/teams/m-sport ford.jpg",
                            Manufacturer = "Ford",
                            Name = "M-Sport Ford"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WorldRallyChampionship.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WorldRallyChampionship.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldRallyChampionship.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WorldRallyChampionship.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorldRallyChampionship.Data.Models.CoDriver", b =>
                {
                    b.HasOne("WorldRallyChampionship.Data.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("WorldRallyChampionship.Data.Models.Comment", b =>
                {
                    b.HasOne("WorldRallyChampionship.Data.Models.Driver", "Driver")
                        .WithMany("Comments")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WorldRallyChampionship.Data.Models.RallyEvent", "RallyEvent")
                        .WithMany("Comments")
                        .HasForeignKey("RallyEventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WorldRallyChampionship.Data.Models.ApplicationUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("RallyEvent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorldRallyChampionship.Data.Models.Crew", b =>
                {
                    b.HasOne("WorldRallyChampionship.Data.Models.CoDriver", "CoDriver")
                        .WithMany()
                        .HasForeignKey("CoDriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorldRallyChampionship.Data.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorldRallyChampionship.Data.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoDriver");

                    b.Navigation("Driver");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("WorldRallyChampionship.Data.Models.Driver", b =>
                {
                    b.HasOne("WorldRallyChampionship.Data.Models.Team", "Team")
                        .WithMany("Drivers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("WorldRallyChampionship.Data.Models.Result", b =>
                {
                    b.HasOne("WorldRallyChampionship.Data.Models.Driver", "Driver")
                        .WithMany("Results")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldRallyChampionship.Data.Models.RallyEvent", "RallyEvent")
                        .WithMany("Results")
                        .HasForeignKey("RallyEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("RallyEvent");
                });

            modelBuilder.Entity("WorldRallyChampionship.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("WorldRallyChampionship.Data.Models.Driver", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("WorldRallyChampionship.Data.Models.RallyEvent", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("WorldRallyChampionship.Data.Models.Team", b =>
                {
                    b.Navigation("Drivers");
                });
#pragma warning restore 612, 618
        }
    }
}
